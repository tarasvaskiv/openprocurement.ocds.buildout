[circus]
check_delay = 5
endpoint = {{ endpoint }}
pubsub_endpoint = {{ pubsub_endpoint }}
umask = 002
logoutput = {{ parts.buildout.directory}}/var/log/circus.log

{% if httpd %}
httpd = 1
httpd_host = {{ httpd_host }}
httpd_port = {{ httpd_port }}
{% endif %}
statsd = {{ statsd }}

{% if couchdb  %}
[watcher:db]
cmd = couchdb
args = -a  {{ parts.buildout.directory }}/etc/couchdb.ini
priority = 100
stdout_stream.class = FileStream
stderr_stream.class = FileStream
stdout_stream.filename = {{ parts.buildout.directory }}/var/log/couchdb.stdout.log
stderr_stream.filename = {{ parts.buildout.directory }}/var/log/couchdb.stderr.log
{% if log_size%}
stdout_stream.max_bytes = {{ log_size }}
stderr_stream.max_bytes = {{ log_size }}
{% endif %}
{% if backup_count %}
stdout_stream.backup_count = {{ backup_count }}
stderr_stream.backup_count = {{ backup_count }}
{% endif %}

[env:db]
HOME = {{ parts.buildout.directory }}/var

[plugin:db_http]
use = circus.plugins.http_observer.HttpObserver
restart_on_error = db
check_url = http://{{ parts['couchdb.ini'].host }}:{{ parts['couchdb.ini'].port }}/
{% endif %}


{% if webapp %}
[watcher:webapp]
cmd = {{ parts.buildout.directory }}/bin/gunicorn  --paste {{ parts.buildout.directory }}/etc/api.ini --preload --access-logfile - --error-log -

stdout_stream.class = FileStream
stderr_stream.class = FileStream
stdout_stream.filename = {{ parts.buildout.directory }}/var/log/webapp.stdout.log
stderr_stream.filename = {{ parts.buildout.directory }}/var/log/webapp.stderr.log
{% if log_size %}
stdout_stream.max_bytes = {{ log_size }}
stderr_stream.max_bytes = {{ log_size }}
{% endif %}
{% if backup_count %}
stdout_stream.backup_count = {{ backup_count }}
stderr_stream.backup_count = {{ backup_count }}
{% endif %}

[plugin:webapp_resource]
use = circus.plugins.resource_watcher.ResourceWatcher
watcher = webapp
max_cpu = 95
max_mem = 400M
{% endif %}

{% if webapp2 %}
[watcher:webapp2]
cmd = {{ parts.buildout.directory }}/bin/gunicorn  --paste {{ parts['api2.ini'].output }} 

stdout_stream.class = FileStream
stderr_stream.class = FileStream
stdout_stream.filename = {{ parts.buildout.directory }}/var/log/webapp.stdout.log
stderr_stream.filename = {{ parts.buildout.directory }}/var/log/webapp.stderr.log
{% if log_size %}
stdout_stream.max_bytes = {{ log_size }}
stderr_stream.max_bytes = {{ log_size }}
{% endif %}
{% if backup_count %}
stdout_stream.backup_count = {{ backup_count }}
stderr_stream.backup_count = {{ backup_count }}
{% endif %}

[plugin:webapp2_resource]
use = circus.plugins.resource_watcher.ResourceWatcher
watcher = webapp2
max_cpu = 95
max_mem = 400M
{% endif %}



{% if databridge  %}
[watcher:databridge]
cmd = {{ parts.buildout.directory }}/bin/databridge
args = {{ parts.buildout.directory }}/etc/bridge.yaml

stdout_stream.class = FileStream
stderr_stream.class = FileStream
stdout_stream.filename = {{ parts.buildout.directory }}/var/log/bridge.stdout.log
stderr_stream.filename = {{ parts.buildout.directory }}/var/log/bridge.stderr.log
{% if log_size%}
stdout_stream.max_bytes = {{ log_size }}
stderr_stream.max_bytes = {{ log_size }}
{% endif %}
{% if backup_count %}
stdout_stream.backup_count = {{ backup_count }}
stderr_stream.backup_count = {{ backup_count }}
{% endif %}

{% endif %}



{% if wishbone  %}
[watcher:wishbone]
cmd = {{ parts.buildout.directory }}/bin/wishbone
args = start --config {{ parts.buildout.directory }}/etc/bootstrap.yaml
singleton = True
numprocesses = 1
stop_signal = INT
stdout_stream.class = FileStream
stderr_stream.class = FileStream
stdout_stream.filename = {{ parts.buildout.directory }}/var/log/wishbone.stdout.log
stderr_stream.filename = {{ parts.buildout.directory }}/var/log/wishbone.stderr.log
{% if log_size%}
stdout_stream.max_bytes = {{ log_size }}
stderr_stream.max_bytes = {{ log_size }}
{% endif %}
{% if backup_count %}
stdout_stream.backup_count = {{ backup_count }}
stderr_stream.backup_count = {{ backup_count }}
{% endif %}
{% endif %}

{% if wishboneneo4j  %}
[watcher:wishboneneo4j]
cmd = {{ parts.buildout.directory }}/bin/wishbone
args = start --config {{ parts.buildout.directory }}/etc/bootstrap_neo4j.yaml
singleton = True
numprocesses = 1
stop_signal = INT
stdout_stream.class = FileStream
stderr_stream.class = FileStream
stdout_stream.filename = {{ parts.buildout.directory }}/var/log/wishboneneo4j.stdout.log
stderr_stream.filename = {{ parts.buildout.directory }}/var/log/wishboneneo4j.stderr.log
{% if log_size%}
stdout_stream.max_bytes = {{ log_size }}
stderr_stream.max_bytes = {{ log_size }}
{% endif %}
{% if backup_count %}
stdout_stream.backup_count = {{ backup_count }}
stderr_stream.backup_count = {{ backup_count }}
{% endif %}
{% endif %}
